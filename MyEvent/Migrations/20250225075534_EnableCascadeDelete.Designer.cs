// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEvent.Models;

#nullable disable

namespace MyEvent.Migrations
{
    [DbContext(typeof(MyEventContext))]
    [Migration("20250225075534_EnableCascadeDelete")]
    partial class EnableCascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyEvent.Models.Credentials", b =>
                {
                    b.Property<string>("Account")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MemberID")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Account")
                        .HasName("PK__Credenti__B0C3AC476950C594");

                    b.HasIndex("MemberID")
                        .IsUnique()
                        .HasFilter("[MemberID] IS NOT NULL");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("MyEvent.Models.CreditCard", b =>
                {
                    b.Property<string>("CardNo")
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength();

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("SecurityNo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.Property<string>("ValidMonth")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("ValidYear")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.HasKey("CardNo")
                        .HasName("PK__CreditCa__55FF25F1B9F394E2");

                    b.HasIndex("MemberID");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("MyEvent.Models.Event", b =>
                {
                    b.Property<string>("EventID")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventHolderID")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventTypeID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("VenueID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.HasKey("EventID")
                        .HasName("PK__Event__7944C870358F73FF");

                    b.HasIndex("EventHolderID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("VenueID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MyEvent.Models.EventHolder", b =>
                {
                    b.Property<string>("EventHolderID")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("EventHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("EventHolderID")
                        .HasName("PK__EventHol__ACE2A24FC6F83D0A");

                    b.ToTable("EventHolder");
                });

            modelBuilder.Entity("MyEvent.Models.EventTag", b =>
                {
                    b.Property<string>("EventID")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("Tag")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EventID", "Tag");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("MyEvent.Models.EventType", b =>
                {
                    b.Property<string>("EventTypeID")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("EventType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EventType");

                    b.HasKey("EventTypeID")
                        .HasName("PK__EventTyp__A9216B1FABFF90B6");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("MyEvent.Models.Member", b =>
                {
                    b.Property<string>("MemberID")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("MemberID")
                        .HasName("PK__Member__0CF04B38B532B3D5");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MyEvent.Models.MemberTel", b =>
                {
                    b.Property<string>("MemberID")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MemberID", "Tel");

                    b.ToTable("MemberTel");
                });

            modelBuilder.Entity("MyEvent.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength();

                    b.Property<string>("CollectionID")
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("EventID")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderID")
                        .HasName("PK__Order__C3905BAFC90BF40E");

                    b.HasIndex("EventID");

                    b.HasIndex("MemberID");

                    b.HasIndex("MethodID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MyEvent.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderID")
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength();

                    b.Property<string>("SeatID")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("TicketID")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("OrderID", "SeatID")
                        .HasName("PK__OrderDet__E0812A924EAEBB87");

                    b.HasIndex("SeatID");

                    b.HasIndex("TicketID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("MyEvent.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PaymentID")
                        .HasName("PK__Payment__9B556A5875A298C7");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("MyEvent.Models.Seat", b =>
                {
                    b.Property<string>("SeatID")
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)")
                        .IsFixedLength();

                    b.Property<string>("Number")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Row")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("VenueID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.HasKey("SeatID")
                        .HasName("PK__Seat__311713D3EA7FE4C2");

                    b.HasIndex("VenueID");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("MyEvent.Models.Ticket", b =>
                {
                    b.Property<string>("TicketID")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EventID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketTypeID")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.HasKey("TicketID")
                        .HasName("PK__Ticket__712CC6275F174448");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("MyEvent.Models.TicketMethod", b =>
                {
                    b.Property<int>("MethodID")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MethodID")
                        .HasName("PK__TicketMe__FC681FB1A621CC57");

                    b.ToTable("TicketMethod");
                });

            modelBuilder.Entity("MyEvent.Models.TicketType", b =>
                {
                    b.Property<string>("EventID")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("TicketTypeID")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.HasKey("EventID", "TicketTypeID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("TicketType");
                });

            modelBuilder.Entity("MyEvent.Models.TicketTypeList", b =>
                {
                    b.Property<string>("TicketTypeID")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TicketTypeID")
                        .HasName("PK__TicketTy__516F0395D3F1980E");

                    b.ToTable("TicketTypeList");
                });

            modelBuilder.Entity("MyEvent.Models.Venue", b =>
                {
                    b.Property<string>("VenueID")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("VenueID")
                        .HasName("PK__Venue__3C57E5D275B2916E");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("MyEvent.Models.Credentials", b =>
                {
                    b.HasOne("MyEvent.Models.Member", "Member")
                        .WithOne("Credentials")
                        .HasForeignKey("MyEvent.Models.Credentials", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Credentia__Membe__5DCAEF64");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MyEvent.Models.CreditCard", b =>
                {
                    b.HasOne("MyEvent.Models.Member", "Member")
                        .WithMany("CreditCard")
                        .HasForeignKey("MemberID")
                        .IsRequired()
                        .HasConstraintName("FK__CreditCar__Membe__628FA481");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MyEvent.Models.Event", b =>
                {
                    b.HasOne("MyEvent.Models.EventHolder", "EventHolder")
                        .WithMany("Event")
                        .HasForeignKey("EventHolderID")
                        .IsRequired()
                        .HasConstraintName("FK__Event__EventHold__2EDAF651");

                    b.HasOne("MyEvent.Models.EventType", "EventType")
                        .WithMany("Event")
                        .HasForeignKey("EventTypeID")
                        .IsRequired()
                        .HasConstraintName("FK__Event__EventType__534D60F1");

                    b.HasOne("MyEvent.Models.Venue", "Venue")
                        .WithMany("Event")
                        .HasForeignKey("VenueID")
                        .IsRequired()
                        .HasConstraintName("FK__Event__VenueID__2DE6D218");

                    b.Navigation("EventHolder");

                    b.Navigation("EventType");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("MyEvent.Models.EventTag", b =>
                {
                    b.HasOne("MyEvent.Models.Event", "Event")
                        .WithMany("EventTag")
                        .HasForeignKey("EventID")
                        .IsRequired()
                        .HasConstraintName("FK__EventTag__EventI__5535A963");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MyEvent.Models.MemberTel", b =>
                {
                    b.HasOne("MyEvent.Models.Member", "Member")
                        .WithMany("MemberTel")
                        .HasForeignKey("MemberID")
                        .IsRequired()
                        .HasConstraintName("FK__MemberTel__Membe__5AEE82B9");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MyEvent.Models.Order", b =>
                {
                    b.HasOne("MyEvent.Models.Event", "Event")
                        .WithMany("Order")
                        .HasForeignKey("EventID")
                        .IsRequired()
                        .HasConstraintName("FK__Order__EventID__2FCF1A8A");

                    b.HasOne("MyEvent.Models.Member", "Member")
                        .WithMany("Order")
                        .HasForeignKey("MemberID")
                        .IsRequired()
                        .HasConstraintName("FK__Order__MemberID__30C33EC3");

                    b.HasOne("MyEvent.Models.TicketMethod", "Method")
                        .WithMany("Order")
                        .HasForeignKey("MethodID")
                        .IsRequired()
                        .HasConstraintName("FK__Order__MethodID__32AB8735");

                    b.HasOne("MyEvent.Models.Payment", "Payment")
                        .WithMany("Order")
                        .HasForeignKey("PaymentID")
                        .IsRequired()
                        .HasConstraintName("FK__Order__PaymentID__31B762FC");

                    b.Navigation("Event");

                    b.Navigation("Member");

                    b.Navigation("Method");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyEvent.Models.OrderDetail", b =>
                {
                    b.HasOne("MyEvent.Models.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderID")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__7C4F7684");

                    b.HasOne("MyEvent.Models.Seat", "Seat")
                        .WithMany("OrderDetail")
                        .HasForeignKey("SeatID")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__SeatI__7D439ABD");

                    b.HasOne("MyEvent.Models.Ticket", "Ticket")
                        .WithMany("OrderDetail")
                        .HasForeignKey("TicketID")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Ticke__7E37BEF6");

                    b.Navigation("Order");

                    b.Navigation("Seat");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("MyEvent.Models.Seat", b =>
                {
                    b.HasOne("MyEvent.Models.Venue", "Venue")
                        .WithMany("Seat")
                        .HasForeignKey("VenueID")
                        .IsRequired()
                        .HasConstraintName("FK__Seat__VenueID__6A30C649");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("MyEvent.Models.Ticket", b =>
                {
                    b.HasOne("MyEvent.Models.TicketTypeList", "TicketTypeList")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeID")
                        .IsRequired()
                        .HasConstraintName("FK__Ticket__TypeID__71D1E811");

                    b.Navigation("TicketTypeList");
                });

            modelBuilder.Entity("MyEvent.Models.TicketType", b =>
                {
                    b.HasOne("MyEvent.Models.Event", "Event")
                        .WithMany("TicketType")
                        .HasForeignKey("EventID")
                        .IsRequired()
                        .HasConstraintName("FK__TicketTyp__Event__7849DB76");

                    b.HasOne("MyEvent.Models.TicketTypeList", "TicketTypeList")
                        .WithMany("TicketType")
                        .HasForeignKey("TicketTypeID")
                        .IsRequired()
                        .HasConstraintName("FK__TicketTyp__Ticke__793DFFAF");

                    b.Navigation("Event");

                    b.Navigation("TicketTypeList");
                });

            modelBuilder.Entity("MyEvent.Models.Event", b =>
                {
                    b.Navigation("EventTag");

                    b.Navigation("Order");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MyEvent.Models.EventHolder", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("MyEvent.Models.EventType", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("MyEvent.Models.Member", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("CreditCard");

                    b.Navigation("MemberTel");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEvent.Models.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MyEvent.Models.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEvent.Models.Seat", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MyEvent.Models.Ticket", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MyEvent.Models.TicketMethod", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEvent.Models.TicketTypeList", b =>
                {
                    b.Navigation("TicketType");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MyEvent.Models.Venue", b =>
                {
                    b.Navigation("Event");

                    b.Navigation("Seat");
                });
#pragma warning restore 612, 618
        }
    }
}
